(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{769:function(v,_,a){"use strict";a.r(_);var t=a(1),e=Object(t.a)({},(function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h2",{attrs:{id:"stegsolve使用方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stegsolve使用方法"}},[v._v("#")]),v._v(" Stegsolve使用方法")]),v._v(" "),a("p",[v._v("Stegsolve使用方法（是因为ctf题总是遇到并且目前百度没有十分详细的探究说明）")]),v._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/image-20220418191643868.png",alt:"image-20220418191643868"}})]),v._v(" "),a("p",[v._v("这个没什么好说的，打开文件 ，保存，退出")]),v._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/image-20220418191703150.png",alt:"image-20220418191703150"}})]),v._v(" "),a("p",[v._v("在分析里面从上到下的依次意思是")]),v._v(" "),a("p",[v._v("File Format:文件格式")]),v._v(" "),a("p",[v._v("Data Extract:数据提取")]),v._v(" "),a("p",[v._v("Steregram Solve:立体试图 可以左右控制偏移")]),v._v(" "),a("p",[v._v("Frame Browser:帧浏览器")]),v._v(" "),a("p",[v._v("Image Combiner:拼图，图片拼接")]),v._v(" "),a("p",[v._v("用法（使用场景）")]),v._v(" "),a("p",[v._v("1.File Format:这里你会看见图片的具体信息有时候有些图片隐写的flag会藏在这里")]),v._v(" "),a("p",[v._v("2.Data Extract:(好多涉及到数据提取的时候，很多博主在wp中都是一带而过，小白们还以为要一个个试。。)")]),v._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/image-20220418191729120.png",alt:"image-20220418191729120"}})]),v._v(" "),a("p",[v._v("左边一大部分主要是讲了RGBA（Alpha是透明度）的颜色通道")]),v._v(" "),a("p",[v._v("为了方便理解我们分开说")]),v._v(" "),a("p",[v._v("RGB是红绿蓝 但他们的值代表的实际上是亮度")]),v._v(" "),a("p",[v._v("R的数字越大，则代表红色亮度越高；R的数字越小，则代表红色亮度越低。G，B同理")]),v._v(" "),a("p",[v._v("R的亮度各有256个级别，GB同理。即从0到255，合计为256个。从数字0到255的逐渐增高，我们人眼观察到的就是亮度越来越大，红色、绿色或蓝色越来越亮。然而256是2的8次方 所以你会看见上图的7~0 一共8个通道")]),v._v(" "),a("p",[v._v("而Alpha就是透明度 该通道用256级灰度来记录图像中的透明度信息，定义透明、不透明和半透明区域")]),v._v(" "),a("p",[v._v("alpha的值为0就是全透明，alpha 的值为 255 则表示不透明")]),v._v(" "),a("p",[v._v("因此左半部分就理解了")]),v._v(" "),a("p",[v._v("右半部分就是Extra By(额外的)和Bit Order（位顺序）和Bit Plane Order（位平面的顺序）")]),v._v(" "),a("p",[v._v("1）.Extra By(额外的)：分为row（行）和column（纵）")]),v._v(" "),a("p",[v._v("每个像素用R，G，B三个分量表示，那么一张图片就像一个矩阵，矩阵的每个单位就是（0"),a("sub",[v._v("255，0")]),v._v("255，0~255）")]),v._v(" "),a("p",[v._v("也就会有是纵排列和行排列了，一般事先访问行再访问列（如果相反会引起ve使用方法）")]),v._v(" "),a("p",[v._v("2）.Bit Order（位顺序）:MSB是一串数据的最高位，LSB是一串数据的最低位。")]),v._v(" "),a("p",[v._v("3）.Bit Plane Order（位平面的顺序)")]),v._v(" "),a("p",[v._v("整个图像分解为8个位平面，从LSB(最低有效位0)到MSB（最高有效位7）随着从位平面0 到位平面7，位平面图像的特征逐渐变得复杂，细节不断增加。（一般我们的图片如果是RGB那么就是24位 3乘8嘛）")]),v._v(" "),a("p",[v._v("4）Bit Plane Order（位平面的顺序）:一般图片是24位 也就是3个8 大家可以想像成三明治 比如BGR就是B为三明治第一层 G为第二层 R为第三层。")]),v._v(" "),a("p",[v._v("3.Steregram Solve:立体试图 可以左右控制偏移 可以放张图片试一下就知道这个是什么意思了")]),v._v(" "),a("p",[v._v("4.Frame Browser:帧浏览器  主要是对GIF之类的动图进行分解，把动图一帧帧的放，有时候会是二维码")]),v._v(" "),a("p",[v._v("5.Image Combiner:拼图，图片拼接（意思显而易见）")]),v._v(" "),a("p",[v._v("接下来会带大家实战去深入理解一下Data Extract里面ctf经常用到的LSB隐写")]),v._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/image-20220418191742917.png",alt:"image-20220418191742917"}})]),v._v(" "),a("p",[v._v("这个我们之前介绍的很详细")]),v._v(" "),a("p",[v._v("而LSB隐写就是修改RGB颜色分量的最低二进制位也就是最低有效位（LSB），而人类的眼睛不会注意到这前后的变化，（人类的眼睛只能识别一部分颜色的变化）")]),v._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/image-20220418191751095.png",alt:"image-20220418191751095"}})]),v._v(" "),a("p",[v._v("如果我们修改lsb那么颜色依然和没修改的一样，并且修改的话每个像数可以携带3比特的信息。")]),v._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/image-20220418191757120.png",alt:"image-20220418191757120"}})]),v._v(" "),a("p",[v._v("这个作用是在于把最低位的二进制全部提取出来")]),v._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/image-20220418191803007.png",alt:"image-20220418191803007"}})]),v._v(" "),a("p",[v._v("这个作用在于对提取出来的最低位使用lsb解码算法")]),v._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/image-20220418191809048.png",alt:"image-20220418191809048"}})])])}),[],!1,null,null,null);_.default=e.exports}}]);